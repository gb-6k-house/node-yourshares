"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/******************************************************************************
** auth: liukai
** date: 2017/7
** ver : 1.0
** desc:  说明
** Copyright © 2017年 尧尚信息科技(wwww.yourshares.cn). All rights reserved
******************************************************************************/
var http = require('http');
class MyRequest {
    constructor(host, port = 8080) {
        this.host = host;
        this.port = port;
    }
    request(method, path, data, cb, headers = {
            "Content-Type": 'charset=UTF-8',
        }) {
        if (typeof data === 'function') {
            headers = cb;
            cb = data;
        }
        headers = Object.assign({}, headers);
        console.info(path + " 头部信息: " + JSON.stringify(headers));
        var opt = {
            host: this.host,
            port: this.port,
            method: method,
            path: path,
            headers: headers
        };
        var body = "";
        var req = http.request(opt, function (res) {
            console.log("post response: " + res.statusCode);
            res.setEncoding('utf8');
            res.on('data', function (d) {
                body += d;
            }).on('end', function () {
                console.log(res.headers);
                console.log('请求返回数据体:' + body);
                typeof cb === 'function' && cb(body);
            });
        }).on('error', function (e) {
            console.log("error: " + e.message);
        });
        if (typeof data !== 'function') {
            req.write(JSON.stringify(data));
        }
        req.end();
    }
    post(path, data, cb, header) {
        this.request('POST', path, data, cb, header);
    }
    get(path, cb, header) {
        this.request('GET', path, cb, header);
    }
    delete(path, cb, header) {
        this.request('DELETE', path, cb, header);
    }
}
exports.MyRequest = MyRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlSZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL215UmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7K0VBTStFO0FBQy9FLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUzQjtJQUdJLFlBQVksSUFBWSxFQUFFLE9BQWUsSUFBSTtRQUN6QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNwQixDQUFDO0lBQ08sT0FBTyxDQUFDLE1BQWMsRUFBRSxJQUFZLEVBQUUsSUFBUyxFQUFFLEVBQU8sRUFBRSxVQUFlO1lBQzdFLGNBQWMsRUFBRSxlQUFlO1NBQ2xDO1FBQ0csRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUM3QixPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFRLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUV6RCxJQUFJLEdBQUcsR0FBRztZQUNOLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLElBQUk7WUFDVixPQUFPLEVBQUUsT0FBTztTQUNuQixDQUFDO1FBQ0YsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsVUFBVSxHQUFHO1lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2hELEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDO2dCQUN0QixJQUFJLElBQUksQ0FBQyxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBQy9CLE9BQU8sRUFBRSxLQUFLLFVBQVUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUE7UUFDRixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFDRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxDQUFDLElBQVksRUFBRSxJQUFTLEVBQUUsRUFBa0IsRUFBRSxNQUFZO1FBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFDRCxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQWtCLEVBQUUsTUFBWTtRQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3pDLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBWSxFQUFFLEVBQWtCLEVBQUUsTUFBWTtRQUNqRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzVDLENBQUM7Q0FDSjtBQXJERCw4QkFxREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4qKiBhdXRoOiBsaXVrYWlcbioqIGRhdGU6IDIwMTcvN1xuKiogdmVyIDogMS4wXG4qKiBkZXNjOiAg6K+05piOXG4qKiBDb3B5cmlnaHQgwqkgMjAxN+W5tCDlsKflsJrkv6Hmga/np5HmioAod3d3dy55b3Vyc2hhcmVzLmNuKS4gQWxsIHJpZ2h0cyByZXNlcnZlZFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5cbmV4cG9ydCBjbGFzcyBNeVJlcXVlc3Qge1xuICAgIGhvc3Q6IHN0cmluZ1xuICAgIHBvcnQ6IG51bWJlclxuICAgIGNvbnN0cnVjdG9yKGhvc3Q6IHN0cmluZywgcG9ydDogbnVtYmVyID0gODA4MCkge1xuICAgICAgICB0aGlzLmhvc3QgPSBob3N0XG4gICAgICAgIHRoaXMucG9ydCA9IHBvcnRcbiAgICB9XG4gICAgcHJpdmF0ZSByZXF1ZXN0KG1ldGhvZDogc3RyaW5nLCBwYXRoOiBzdHJpbmcsIGRhdGE6IGFueSwgY2I6IGFueSwgaGVhZGVyczogYW55ID0ge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiAnY2hhcnNldD1VVEYtOCcsXG4gICAgfSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBjYjtcbiAgICAgICAgICAgIGNiID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7ICAgICAgfSwgaGVhZGVycylcbiAgICAgICAgY29uc29sZS5pbmZvKHBhdGggKyBcIiDlpLTpg6jkv6Hmga86IFwiICsgSlNPTi5zdHJpbmdpZnkoaGVhZGVycykpO1xuXG4gICAgICAgIHZhciBvcHQgPSB7XG4gICAgICAgICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICAgICAgICBwb3J0OiB0aGlzLnBvcnQsXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXG4gICAgICAgIH07XG4gICAgICAgIHZhciBib2R5ID0gXCJcIjtcbiAgICAgICAgdmFyIHJlcSA9IGh0dHAucmVxdWVzdChvcHQsIGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicG9zdCByZXNwb25zZTogXCIgKyByZXMuc3RhdHVzQ29kZSk7XG4gICAgICAgICAgICByZXMuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgICAgICAgICAgIHJlcy5vbignZGF0YScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgYm9keSArPSBkO1xuICAgICAgICAgICAgfSkub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMuaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+ivt+axgui/lOWbnuaVsOaNruS9kzonICsgYm9keSk7XG4gICAgICAgICAgICAgICAgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nICYmIGNiKGJvZHkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3I6IFwiICsgZS5tZXNzYWdlKTtcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXEud3JpdGUoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIHJlcS5lbmQoKTtcbiAgICB9XG5cbiAgICBwb3N0KHBhdGg6IHN0cmluZywgZGF0YTogYW55LCBjYjogKGRhdGEpID0+IHZvaWQsIGhlYWRlcj86IGFueSkge1xuICAgICAgICB0aGlzLnJlcXVlc3QoJ1BPU1QnLCBwYXRoLCBkYXRhLCBjYiwgaGVhZGVyKVxuICAgIH1cbiAgICBnZXQocGF0aDogc3RyaW5nLCBjYjogKGRhdGEpID0+IHZvaWQsIGhlYWRlcj86IGFueSkge1xuICAgICAgICB0aGlzLnJlcXVlc3QoJ0dFVCcsIHBhdGgsIGNiLCBoZWFkZXIpXG4gICAgfVxuICAgIGRlbGV0ZShwYXRoOiBzdHJpbmcsIGNiOiAoZGF0YSkgPT4gdm9pZCwgaGVhZGVyPzogYW55KSB7XG4gICAgICAgIHRoaXMucmVxdWVzdCgnREVMRVRFJywgcGF0aCwgY2IsIGhlYWRlcilcbiAgICB9XG59Il19